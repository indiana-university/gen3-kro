apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: gen3eks.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "2"
spec:
  schema:
    apiVersion: v1alpha1
    kind: Gen3EKS
    spec:
      name: string
      region: string
      vpcID: string
      subnetIDs: string[]
      version: string | default="1.28"
      nodeGroupInstanceTypes: string[] | default=["t3.medium"]
      nodeGroupDesiredSize: number | default=2
      nodeGroupMinSize: number | default=1
      nodeGroupMaxSize: number | default=4
    status:
      clusterARN: ${cluster.status.ackResourceMetadata.arn}
      clusterName: ${cluster.status.name}
      clusterEndpoint: ${cluster.status.endpoint}
      clusterCertificateAuthority: ${cluster.status.certificateAuthority.data}
      nodeGroupARN: ${nodeGroup.status.ackResourceMetadata.arn}
      nodeGroupStatus: ${nodeGroup.status.status}

  resources:
  - id: clusterRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-eks-cluster-role
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        name: ${schema.spec.name}-eks-cluster-role
        description: "Gen3 EKS cluster IAM role"
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        policies:
          - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        tags:
          - key: "Name"
            value: ${schema.spec.name}-eks-cluster-role
  - id: nodeRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-eks-node-role
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        name: ${schema.spec.name}-eks-node-role
        description: "Gen3 EKS node IAM role"
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        policies:
          - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
          - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        tags:
          - key: "Name"
            value: ${schema.spec.name}-eks-node-role
  - id: securityGroup
    template:
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: SecurityGroup
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-eks-sg
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        name: ${schema.spec.name}-eks-sg
        description: "Gen3 EKS cluster security group"
        vpcID: ${schema.spec.vpcID}
        tags:
          - key: "Name"
            value: ${schema.spec.name}-eks-sg
          - key: "Environment"
            value: "gen3"
  - id: cluster
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-eks
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        name: ${schema.spec.name}-eks
        version: ${schema.spec.version}
        roleARN: ${clusterRole.status.ackResourceMetadata.arn}
        resourcesVPCConfig:
          subnetIDs: ${schema.spec.subnetIDs}
          securityGroupIDs:
            - ${securityGroup.status.id}
          endpointPublicAccess: true
          endpointPrivateAccess: true
        tags:
          Name: ${schema.spec.name}-eks
          Environment: gen3
  - id: nodeGroup
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Nodegroup
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-eks-nodegroup
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        name: ${schema.spec.name}-eks-nodegroup
        clusterName: ${cluster.status.name}
        nodeRole: ${nodeRole.status.ackResourceMetadata.arn}
        subnets: ${schema.spec.subnetIDs}
        scalingConfig:
          desiredSize: ${schema.spec.nodeGroupDesiredSize}
          minSize: ${schema.spec.nodeGroupMinSize}
          maxSize: ${schema.spec.nodeGroupMaxSize}
        instanceTypes: ${schema.spec.nodeGroupInstanceTypes}
        tags:
          Name: ${schema.spec.name}-eks-nodegroup
          Environment: gen3
