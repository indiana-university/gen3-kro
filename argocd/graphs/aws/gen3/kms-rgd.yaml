apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: gen3kms.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
spec:
  schema:
    apiVersion: v1alpha1
    kind: Gen3KMS
    spec:
      name: string
      region: string
      description: string | default="Gen3 KMS encryption key"
      keyUsage: string | default="ENCRYPT_DECRYPT"
      customerMasterKeySpec: string | default="SYMMETRIC_DEFAULT"
      multiRegion: boolean | default=false
      enableKeyRotation: boolean | default=true
    status:
      keyARN: ${key.status.ackResourceMetadata.arn}
      keyID: ${key.status.keyID}
      aliasARN: ${alias.status.ackResourceMetadata.arn}

  resources:
  - id: key
    template:
      apiVersion: kms.services.k8s.aws/v1alpha1
      kind: Key
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        description: ${schema.spec.description}
        keyUsage: ${schema.spec.keyUsage}
        customerMasterKeySpec: ${schema.spec.customerMasterKeySpec}
        multiRegion: ${schema.spec.multiRegion}
        tags:
          - key: "Name"
            value: ${schema.spec.name}
          - key: "Environment"
            value: "gen3"
  - id: alias
    template:
      apiVersion: kms.services.k8s.aws/v1alpha1
      kind: Alias
      metadata:
        namespace: ${schema.spec.name}
        name: ${schema.spec.name}-alias
        annotations:
          services.k8s.aws/region: ${schema.spec.region}
      spec:
        aliasName: alias/${schema.spec.name}
        targetKeyID: ${key.status.keyID}
