# Spoke Addons ApplicationSet
#
# This ApplicationSet deploys cluster addons (KRO, ACK controllers, and platform components)
# to spoke clusters only (excludes hub/control-plane).
#
# 1. Addon Catalog (addons/hub/catalog.yaml)
#    - Defines available addons with their Helm chart sources and versions
#    - Centralized registry for KRO, ACK controllers, and platform components
#
# 2. Enablement Configuration (per spoke): spokes/{tenant}/addons/enablement.yaml
#    - Controls which addons are deployed to each spoke cluster
#
# 3. Values Configuration (per spoke): spokes/{tenant}/addons/values.yaml
#    - Provides addon-specific configuration (resource limits, IRSA roles, etc.)
#
# The ApplicationSet uses:
# - Matrix generator: Combines spoke clusters with the addon catalog
# - Cluster annotations: hub_repo_url, hub_repo_revision, hub_repo_basepath
# - Cluster labels: fleet_member!=control-plane (filters for spokes only), tenant
# - Multiple sources: Helm chart + values repository reference
#
# Sync waves:
# - Wave -1: KRO (must be installed first for ResourceGraphDefinitions)
# - Wave 0: All other addons
#
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: spoke-addons
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - matrix:
        generators:
          # Spoke clusters only (not control-plane)
          - clusters:
              selector:
                matchExpressions:
                  - key: fleet_member
                    operator: NotIn
                    values:
                      - control-plane
          # Addon catalog from git repository
          - git:
              repoURL: '{{.metadata.annotations.hub_repo_url}}'
              revision: '{{.metadata.annotations.hub_repo_revision}}'
              files:
                - path: '{{.metadata.annotations.hub_repo_basepath}}/addons/hub/catalog.yaml'
  template:
    metadata:
      name: '{{.name}}-{{.values.items.addon}}'
      labels:
        app.kubernetes.io/part-of: addons
        app.kubernetes.io/name: '{{.values.items.addon}}'
        cluster: '{{.name}}'
        addon: '{{.values.items.addon}}'
        fleet-member: '{{.metadata.labels.fleet_member}}'
        tenant: '{{.metadata.labels.tenant}}'
      annotations:
        # KRO must be installed first (wave -1), other addons in wave 0
        argocd.argoproj.io/sync-wave: '{{if eq .values.items.addon "kro"}}"-1"{{else}}"0"{{end}}'
    spec:
      project: default
      sources:
        # Addon Helm chart source
        - repoURL: '{{.values.items.addon.repoURL}}'
          targetRevision: '{{.values.items.addon.revision}}'
          chart: '{{.values.items.addon.chart}}'
          helm:
            valueFiles:
              # Load values from spoke-specific location
              - $values/spokes/{{.metadata.labels.tenant}}/addons/values.yaml
            # Addon-specific inline values
            values: |
              {{- if eq .values.items.addon "kro" }}
              # KRO-specific configuration
              image:
                tag: {{.values.items.addon.revision}}
              {{- end }}
              {{- if hasPrefix "ack-" .values.items.addon }}
              # ACK controller common configuration
              aws:
                region: {{.metadata.annotations.aws_region}}
              serviceAccount:
                annotations:
                  eks.amazonaws.com/role-arn: {{index .metadata.annotations (printf "%s_irsa_role_arn" .values.items.addon)}}
              {{- end }}
        # Values repository reference for valueFiles
        - repoURL: '{{.metadata.annotations.hub_repo_url}}'
          targetRevision: '{{.metadata.annotations.hub_repo_revision}}'
          ref: values
      destination:
        name: '{{.name}}'
        # Namespace mapping: kro -> kro-system, ack-* -> ack-system, others use addon name
        namespace: '{{if eq .values.items.addon "kro"}}kro-system{{else if hasPrefix "ack-" .values.items.addon}}ack-system{{else}}{{.values.items.addon}}-system{{end}}'
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: 3
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m
      # Ignore differences in CRD conversion webhooks (common with large CRDs)
      ignoreDifferences:
        - group: apiextensions.k8s.io
          kind: CustomResourceDefinition
          jsonPointers:
            - /spec/conversion/webhook/clientConfig/caBundle
            - /status
