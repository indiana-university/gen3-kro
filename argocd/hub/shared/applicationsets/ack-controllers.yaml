# Unified ACK Controllers ApplicationSet
# This file contains all ACK controller ApplicationSets using matrix generators
# Each controller can be enabled/disabled per cluster via labels

---
# ACK IAM Controller - Hub ONLY
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ack-iam
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  syncPolicy:
    preserveResourcesOnDeletion: false
  generators:
  - clusters:
      selector:
        matchLabels:
          argocd.argoproj.io/secret-type: cluster
          fleet_member: control-plane  # IAM only on hub
          enable_ack_iam: "true"
  template:
    metadata:
      name: '{{.name}}-ack-iam'
      labels:
        app: ack-iam
        cluster: '{{.name}}'
    spec:
      project: default
      source:
        repoURL: oci://public.ecr.aws/aws-controllers-k8s
        chart: iam-chart
        targetRevision: 1.3.16
        helm:
          releaseName: ack-iam-controller
          values: |
            aws:
              region: {{.metadata.annotations.hub_aws_region}}
            serviceAccount:
              name: ack-iam-controller
              annotations:
                eks.amazonaws.com/role-arn: {{(index (index .metadata.annotations.ack_controllers | fromJson).iam "hub_role_arn")}}
            resources:
              limits:
                cpu: 200m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 128Mi
      destination:
        server: '{{.server}}'
        namespace: ack-system
      syncPolicy:
        # DISABLED FOR LOCAL TESTING - Re-enable after validation
        # automated:
        #   selfHeal: true
        #   prune: true
        #   allowEmpty: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: -1
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 10m

---
# ACK EKS Controller - Hub and Spokes
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ack-eks
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  syncPolicy:
    preserveResourcesOnDeletion: false
  generators:
  - clusters:
      selector:
        matchLabels:
          argocd.argoproj.io/secret-type: cluster
          enable_ack_eks: "true"
  template:
    metadata:
      name: '{{.name}}-ack-eks'
      labels:
        app: ack-eks
        cluster: '{{.name}}'
    spec:
      project: default
      source:
        repoURL: oci://public.ecr.aws/aws-controllers-k8s
        chart: eks-chart
        targetRevision: 1.6.0
        helm:
          releaseName: ack-eks-controller
          values: |
            aws:
              region: {{if eq .metadata.labels.fleet_member "control-plane"}}{{.metadata.annotations.hub_aws_region}}{{else}}{{.metadata.annotations.aws_region}}{{end}}
            serviceAccount:
              name: ack-eks-controller
              annotations:
                eks.amazonaws.com/role-arn: {{if eq .metadata.labels.fleet_member "control-plane"}}{{(index (index .metadata.annotations.ack_controllers | fromJson).eks "hub_role_arn")}}{{else}}{{index (index (index .metadata.annotations.ack_controllers | fromJson).eks "spoke_role_arns") .name}}{{end}}
            resources:
              limits:
                cpu: 200m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 128Mi
      destination:
        server: '{{.server}}'
        namespace: ack-system
      syncPolicy:
        # DISABLED FOR LOCAL TESTING - Re-enable after validation
        # automated:
        #   selfHeal: true
        #   prune: true
        #   allowEmpty: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: -1
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 10m

---
# ACK EC2 Controller - Hub and Spokes
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ack-ec2
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  syncPolicy:
    preserveResourcesOnDeletion: false
  generators:
  - clusters:
      selector:
        matchLabels:
          argocd.argoproj.io/secret-type: cluster
          enable_ack_ec2: "true"
  template:
    metadata:
      name: '{{.name}}-ack-ec2'
      labels:
        app: ack-ec2
        cluster: '{{.name}}'
    spec:
      project: default
      source:
        repoURL: oci://public.ecr.aws/aws-controllers-k8s
        chart: ec2-chart
        targetRevision: 1.3.4
        helm:
          releaseName: ack-ec2-controller
          values: |
            aws:
              region: {{if eq .metadata.labels.fleet_member "control-plane"}}{{.metadata.annotations.hub_aws_region}}{{else}}{{.metadata.annotations.aws_region}}{{end}}
            serviceAccount:
              name: ack-ec2-controller
              annotations:
                eks.amazonaws.com/role-arn: {{if eq .metadata.labels.fleet_member "control-plane"}}{{(index (index .metadata.annotations.ack_controllers | fromJson).ec2 "hub_role_arn")}}{{else}}{{index (index (index .metadata.annotations.ack_controllers | fromJson).ec2 "spoke_role_arns") .name}}{{end}}
            resources:
              limits:
                cpu: 200m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 128Mi
      destination:
        server: '{{.server}}'
        namespace: ack-system
      syncPolicy:
        # DISABLED FOR LOCAL TESTING - Re-enable after validation
        # automated:
          # selfHeal: true
          # prune: true
          # allowEmpty: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: -1
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 10m

---
# ACK EFS Controller - Hub and Spokes
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ack-efs
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  syncPolicy:
    preserveResourcesOnDeletion: false
  generators:
  - clusters:
      selector:
        matchLabels:
          argocd.argoproj.io/secret-type: cluster
          enable_ack_efs: "true"
  template:
    metadata:
      name: '{{.name}}-ack-efs'
      labels:
        app: ack-efs
        cluster: '{{.name}}'
    spec:
      project: default
      source:
        repoURL: oci://public.ecr.aws/aws-controllers-k8s
        chart: efs-chart
        targetRevision: 1.0.6
        helm:
          releaseName: ack-efs-controller
          values: |
            aws:
              region: {{if eq .metadata.labels.fleet_member "control-plane"}}{{.metadata.annotations.hub_aws_region}}{{else}}{{.metadata.annotations.aws_region}}{{end}}
            serviceAccount:
              name: ack-efs-controller
              annotations:
                eks.amazonaws.com/role-arn: {{if eq .metadata.labels.fleet_member "control-plane"}}{{(index (index .metadata.annotations.ack_controllers | fromJson).efs "hub_role_arn")}}{{else}}{{index (index (index .metadata.annotations.ack_controllers | fromJson).efs "spoke_role_arns") .name}}{{end}}
            resources:
              limits:
                cpu: 200m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 128Mi
      destination:
        server: '{{.server}}'
        namespace: ack-system
      syncPolicy:
        # DISABLED FOR LOCAL TESTING - Re-enable after validation
        # automated:
          # selfHeal: true
          # prune: true
          # allowEmpty: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: -1
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 10m
