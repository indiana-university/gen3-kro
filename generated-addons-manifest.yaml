apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"argoproj.io/v1alpha1","kind":"ApplicationSet","metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"0"},"name":"hub-addons","namespace":"argocd"},"spec":{"generators":[{"matrix":{"generators":[{"clusters":{"selector":{"matchLabels":{"fleet_member":"control-plane"}}}},{"git":{"files":[{"path":"{{.metadata.annotations.hub_repo_basepath}}/bootstrap/addons/catalog.yaml"}],"repoURL":"{{.metadata.annotations.hub_repo_url}}","revision":"{{.metadata.annotations.hub_repo_revision}}"}}]}}],"goTemplate":true,"goTemplateOptions":["missingkey=error"],"template":{"metadata":{"annotations":{"argocd.argoproj.io/sync-wave":"{{if eq .values.items.addon \"kro\"}}\"-1\"{{else}}\"0\"{{end}}"},"labels":{"addon":"{{.values.items.addon}}","app.kubernetes.io/name":"{{.values.items.addon}}","app.kubernetes.io/part-of":"addons","cluster":"{{.name}}","fleet-member":"control-plane"},"name":"{{.name}}-{{.values.items.addon}}"},"spec":{"destination":{"name":"{{.name}}","namespace":"{{if eq .values.items.addon \"kro\"}}kro-system{{else if hasPrefix \"ack-\" .values.items.addon}}ack-system{{else}}{{.values.items.addon}}-system{{end}}"},"ignoreDifferences":[{"group":"apiextensions.k8s.io","jsonPointers":["/spec/conversion/webhook/clientConfig/caBundle","/status"],"kind":"CustomResourceDefinition"}],"project":"default","sources":[{"chart":"{{.values.items.addon.chart}}","helm":{"valueFiles":["$values/bootstrap/addons/values.yaml"],"values":"{{- if eq .values.items.addon \"kro\" }}\n# KRO-specific configuration\nimage:\n  tag: {{.values.items.addon.revision}}\n{{- end }}\n{{- if hasPrefix \"ack-\" .values.items.addon }}\n# ACK controller common configuration\naws:\n  region: {{.metadata.annotations.aws_region}}\nserviceAccount:\n  annotations:\n    eks.amazonaws.com/role-arn: {{index .metadata.annotations (printf \"%s_irsa_role_arn\" .values.items.addon)}}\n{{- end }}\n"},"repoURL":"{{.values.items.addon.repoURL}}","targetRevision":"{{.values.items.addon.revision}}"},{"ref":"values","repoURL":"{{.metadata.annotations.hub_repo_url}}","targetRevision":"{{.metadata.annotations.hub_repo_revision}}"}],"syncPolicy":{"automated":{"allowEmpty":false,"prune":true,"selfHeal":true},"retry":{"backoff":{"duration":"5s","factor":2,"maxDuration":"3m"},"limit":3},"syncOptions":["CreateNamespace=true","ServerSideApply=true"]}}}}}
  creationTimestamp: "2025-10-13T06:43:03Z"
  generation: 1
  name: hub-addons
  namespace: argocd
  resourceVersion: "123667"
  uid: 50b31b8e-3160-4497-bb7a-75d03cb82242
spec:
  generators:
  - matrix:
      generators:
      - clusters:
          selector:
            matchLabels:
              fleet_member: control-plane
      - git:
          files:
          - path: '{{.metadata.annotations.hub_repo_basepath}}/bootstrap/addons/catalog.yaml'
          repoURL: '{{.metadata.annotations.hub_repo_url}}'
          revision: '{{.metadata.annotations.hub_repo_revision}}'
  goTemplate: true
  goTemplateOptions:
  - missingkey=error
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: '{{if eq .values.items.addon "kro"}}"-1"{{else}}"0"{{end}}'
      labels:
        addon: '{{.values.items.addon}}'
        app.kubernetes.io/name: '{{.values.items.addon}}'
        app.kubernetes.io/part-of: addons
        cluster: '{{.name}}'
        fleet-member: control-plane
      name: '{{.name}}-{{.values.items.addon}}'
    spec:
      destination:
        name: '{{.name}}'
        namespace: '{{if eq .values.items.addon "kro"}}kro-system{{else if hasPrefix
          "ack-" .values.items.addon}}ack-system{{else}}{{.values.items.addon}}-system{{end}}'
      ignoreDifferences:
      - group: apiextensions.k8s.io
        jsonPointers:
        - /spec/conversion/webhook/clientConfig/caBundle
        - /status
        kind: CustomResourceDefinition
      project: default
      sources:
      - chart: '{{.values.items.addon.chart}}'
        helm:
          valueFiles:
          - $values/bootstrap/addons/values.yaml
          values: |
            {{- if eq .values.items.addon "kro" }}
            # KRO-specific configuration
            image:
              tag: {{.values.items.addon.revision}}
            {{- end }}
            {{- if hasPrefix "ack-" .values.items.addon }}
            # ACK controller common configuration
            aws:
              region: {{.metadata.annotations.aws_region}}
            serviceAccount:
              annotations:
                eks.amazonaws.com/role-arn: {{index .metadata.annotations (printf "%s_irsa_role_arn" .values.items.addon)}}
            {{- end }}
        repoURL: '{{.values.items.addon.repoURL}}'
        targetRevision: '{{.values.items.addon.revision}}'
      - ref: values
        repoURL: '{{.metadata.annotations.hub_repo_url}}'
        targetRevision: '{{.metadata.annotations.hub_repo_revision}}'
      syncPolicy:
        automated:
          allowEmpty: false
          prune: true
          selfHeal: true
        retry:
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m
          limit: 3
        syncOptions:
        - CreateNamespace=true
        - ServerSideApply=true
status:
  conditions:
  - lastTransitionTime: "2025-10-13T06:43:03Z"
    message: 'failed to execute go template {{.name}}-{{.values.items.addon}}: template:
      :1:19: executing "" at <.values.items.addon>: map has no entry for key "values"'
    reason: RenderTemplateParamsError
    status: "True"
    type: ErrorOccurred
  - lastTransitionTime: "2025-10-13T06:43:03Z"
    message: 'failed to execute go template {{.name}}-{{.values.items.addon}}: template:
      :1:19: executing "" at <.values.items.addon>: map has no entry for key "values"'
    reason: ErrorOccurred
    status: "False"
    type: ParametersGenerated
  - lastTransitionTime: "2025-10-13T06:43:03Z"
    message: 'failed to execute go template {{.name}}-{{.values.items.addon}}: template:
      :1:19: executing "" at <.values.items.addon>: map has no entry for key "values"'
    reason: RenderTemplateParamsError
    status: "False"
    type: ResourcesUpToDate
